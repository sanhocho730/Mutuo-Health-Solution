from openai import AzureOpenAI
from dotenv import load_dotenv
import os


def read_file(file_path):
    """Utility function to read file content."""
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def write_file(file_path, content):
    """Utility function to write content to file."""
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(content)

def merge_answers_with_gpt(original_content, new_answers_content):
    """
    Uses GPT to intelligently merge new answers into the existing content.
    
    :param original_content: The current content of the answered questions.
    :param new_answers_content: The newly generated answers to be merged.
    :return: The merged content as generated by GPT.
    """
    prompt = (
        "Here are the existing answers to some questions:\n\n"
        f"{original_content}\n\n"
        "And here are new answers generated based on a recent conversation:\n\n"
        f"{new_answers_content}\n\n"
        "Please update the existing answers with the new information, replacing any unanswered "
        "questions with their new answers and leaving already answered questions as they are."
    )
    
    response = client.chat.completions.create(
        model=AZURE_OPENAI_TURBO_DEPLOYMENT,
        messages=[
            {"role": "system", "content": "You are a helpful assistant capable of merging document contents intelligently."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.4,
        max_tokens=2048  # Adjust based on the length of your content; might need fine-tuning.
    )
    
    try:
        merged_content = response.choices[0].message.content
    except AttributeError:
        merged_content = "Error: Could not generate merged content based on the conversation."
    
    return merged_content



def update_answered_questions(original_path, new_answers_path):
    """
    Updates the original answered questions file with newly generated answers,
    effectively replacing questions that were previously unanswered.

    :param original_path: Path to the original file containing answered questions.
    :param new_answers_path: Path to the file containing newly generated answers.
    """
    original_content = read_file(original_path)
    new_answers_content = read_file(new_answers_path)

    # Example logic for updating the original content with new answers
    # This part needs to be customized based on how your questions and answers are structured
    updated_content = merge_answers_with_gpt(original_content, new_answers_content)
    

    # Write the updated content back to the original file
    write_file(original_path, updated_content)
    print(f"Updated answers have been saved to {original_path}")


def generate_answers_from_conversation(conversation_path, unanswered_questions_path, answered_questions_path):
    """
    Generates answers for the unanswered questions based on the conversation provided.
    Reads the conversation and unanswered questions from their respective files, then
    generates answers using GPT and saves them to a specified file.
    
    :param conversation_path: Path to the file containing the conversation text.
    :param unanswered_questions_path: Path to the file containing the unanswered questions.
    :param answered_questions_path: Path to the file where the answered questions will be saved.
    """
    # Load the conversation text
    with open(conversation_path, 'r', encoding='utf-8') as file:
        conversation_text = file.read()
    
    # Load the unanswered questions
    with open(unanswered_questions_path, 'r', encoding='utf-8') as file:
        unanswered_questions = file.read()
    
    # Generate the prompt for GPT based on the conversation and unanswered questions
    prompt = (
        f"Use the below information to fill in the form. There are three types of questions:"
        f"1. Free field questions: These should be directly answered in the text."
        f"2. Checkbox questions: For checkbox questions, answer the question by checking the correct checkbox options. Indicate the selected option by marking the checkbox (â˜‘) directly."
        f"3. Multiple choice questions: For these, write out the selected answers."
        f"If the information needed to answer a question is not provided, respond with \"N/A\" and ensure all original questions are included in your response."
        f"Based on the above instructions and the following conversation, please answer the unanswered questions:\n\n"
        f"Conversation:\n{conversation_text}\n\n"
        f"Unanswered Questions:\n{unanswered_questions}"
    )
    
    # Use GPT to generate answers
    response = client.chat.completions.create(
        model=AZURE_OPENAI_TURBO_DEPLOYMENT,
        messages=[
            {"role": "system", "content": "You are a helpful assistant capable of understanding detailed medical conversations and providing specific answers based on the context."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.4  # Adjust temperature if necessary to balance creativity and relevance
    )
    
    # Extract the GPT-generated answers
    try:
        answered_text = response.choices[0].message.content
    except AttributeError:
        answered_text = "Error: Could not generate answers based on the conversation."
    
    # Save the GPT-generated answers to a file
    with open(unanswered_path, 'w', encoding='utf-8') as file:
        file.write(answered_text)

    print(f"Answers generated and saved to {unanswered_path}")
    
    update_answered_questions(answered_questions_txt_path, unanswered_path)



EMBEDDING_MODEL = 'text-embedding-ada-002'

load_dotenv(override=True)

# AZURE_OPENAI_TURBO_DEPLOYMENT = os.getenv('AZURE_OPENAI_GPT_TURBO_DEPLOYMENT')
AZURE_OPENAI_TURBO_DEPLOYMENT = os.getenv('AZURE_OPENAI_GPT_TURBO_DEPLOYMENT')
client = AzureOpenAI(
    azure_endpoint=os.getenv('GPT_TEXT_ENDPOINT'),
    api_key=os.getenv('GPT_TEXT_API_KEY'),
)


conversation_txt_path = '/Users/isanho/Desktop/autoscribe_forms_main/conversation.txt'
answered_questions_txt_path = '/Users/isanho/Desktop/autoscribe_forms_main/answered_questions.txt'
unanswered_path = '/Users/isanho/Desktop/autoscribe_forms_main/unanswered_questions.txt'

#Try to answer unanswered questions
generate_answers_from_conversation(conversation_txt_path, unanswered_path, answered_questions_txt_path)